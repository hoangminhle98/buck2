"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6990],{78503:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var s=t(74848),o=t(28453);const r={id:"help-env",title:"help-env"},a=void 0,i={id:"users/commands/help-env",title:"help-env",description:"These are the flags/commands under buck2 help-env and their --help output:",source:"@site/../docs/users/commands/help-env.generated.md",sourceDirName:"users/commands",slug:"/users/commands/help-env",permalink:"/docs/users/commands/help-env",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"help-env",title:"help-env"},sidebar:"main",previous:{title:"expand-external-cell",permalink:"/docs/users/commands/expand-external-cell"},next:{title:"init",permalink:"/docs/users/commands/init"}},l={},c=[];function u(e){const n={code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["These are the flags/commands under ",(0,s.jsx)(n.code,{children:"buck2 help-env"})," and their ",(0,s.jsx)(n.code,{children:"--help"})," output:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"Print help for environment variables used by buck2\n\nUsage: buck2-release help-env [OPTIONS]\n\nOptions:\n      --self-testing\n          Also print those environment variables that are only used for buck2 integration tests.\n          \n          These are all unstable and not meant to be used by most users.\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nUniversal Options:\n  -v, --verbose <VERBOSITY>\n          How verbose buck should be while logging.\n          \n          Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3 =\n          more info about everything; 4 = more info about everything + stderr;\n          \n          It can be combined with specific log items (stderr, full_failed_command, commands,\n          actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n          \"-v=1,stderr\"\n          \n          [default: 1]\n\n      --oncall <ONCALL>\n          The oncall executing this command\n\n      --client-metadata <CLIENT_METADATA>\n          Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the\n          form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n          datasets\n\n"})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var s=t(96540);const o={},r=s.createContext(o);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);